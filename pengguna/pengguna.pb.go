// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pengguna.proto

package pengguna

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PenggunaData struct {
	IdPengguna           int64    `protobuf:"varint,1,opt,name=id_pengguna,json=idPengguna,proto3" json:"id_pengguna,omitempty"`
	NamaPengguna         string   `protobuf:"bytes,2,opt,name=nama_pengguna,json=namaPengguna,proto3" json:"nama_pengguna,omitempty"`
	Password             string   `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	NomorTelepon         string   `protobuf:"bytes,4,opt,name=nomor_telepon,json=nomorTelepon,proto3" json:"nomor_telepon,omitempty"`
	Alamat               string   `protobuf:"bytes,5,opt,name=alamat,proto3" json:"alamat,omitempty"`
	Email                string   `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	Balance              float32  `protobuf:"fixed32,7,opt,name=balance,proto3" json:"balance,omitempty"`
	UrlFotoProfil        string   `protobuf:"bytes,8,opt,name=url_foto_profil,json=urlFotoProfil,proto3" json:"url_foto_profil,omitempty"`
	ErrorsMessage        []string `protobuf:"bytes,9,rep,name=errors_message,json=errorsMessage,proto3" json:"errors_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PenggunaData) Reset()         { *m = PenggunaData{} }
func (m *PenggunaData) String() string { return proto.CompactTextString(m) }
func (*PenggunaData) ProtoMessage()    {}
func (*PenggunaData) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4d756069402c44b, []int{0}
}

func (m *PenggunaData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PenggunaData.Unmarshal(m, b)
}
func (m *PenggunaData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PenggunaData.Marshal(b, m, deterministic)
}
func (m *PenggunaData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PenggunaData.Merge(m, src)
}
func (m *PenggunaData) XXX_Size() int {
	return xxx_messageInfo_PenggunaData.Size(m)
}
func (m *PenggunaData) XXX_DiscardUnknown() {
	xxx_messageInfo_PenggunaData.DiscardUnknown(m)
}

var xxx_messageInfo_PenggunaData proto.InternalMessageInfo

func (m *PenggunaData) GetIdPengguna() int64 {
	if m != nil {
		return m.IdPengguna
	}
	return 0
}

func (m *PenggunaData) GetNamaPengguna() string {
	if m != nil {
		return m.NamaPengguna
	}
	return ""
}

func (m *PenggunaData) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *PenggunaData) GetNomorTelepon() string {
	if m != nil {
		return m.NomorTelepon
	}
	return ""
}

func (m *PenggunaData) GetAlamat() string {
	if m != nil {
		return m.Alamat
	}
	return ""
}

func (m *PenggunaData) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *PenggunaData) GetBalance() float32 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *PenggunaData) GetUrlFotoProfil() string {
	if m != nil {
		return m.UrlFotoProfil
	}
	return ""
}

func (m *PenggunaData) GetErrorsMessage() []string {
	if m != nil {
		return m.ErrorsMessage
	}
	return nil
}

func init() {
	proto.RegisterType((*PenggunaData)(nil), "pengguna.penggunaData")
}

func init() { proto.RegisterFile("pengguna.proto", fileDescriptor_e4d756069402c44b) }

var fileDescriptor_e4d756069402c44b = []byte{
	// 296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0x4d, 0x4a, 0x33, 0x41,
	0x10, 0x86, 0xbf, 0x49, 0xbe, 0xfc, 0x55, 0xfe, 0xa4, 0x91, 0xd0, 0x64, 0xe3, 0x10, 0x51, 0xb2,
	0xca, 0x42, 0x0f, 0x20, 0x42, 0x70, 0x27, 0x84, 0xe8, 0x7e, 0xa8, 0x24, 0x95, 0xa1, 0xa1, 0xa7,
	0x6b, 0xa8, 0xe9, 0xe8, 0xa5, 0xbc, 0x91, 0x97, 0x91, 0xf4, 0x64, 0x26, 0x6e, 0xdc, 0xe8, 0xf2,
	0x79, 0xea, 0xed, 0x17, 0xaa, 0x68, 0x18, 0xe5, 0xe4, 0xd2, 0xf4, 0xe0, 0x70, 0x91, 0x0b, 0x7b,
	0x56, 0xdd, 0x8a, 0x67, 0x1f, 0x0d, 0x18, 0x54, 0xb0, 0x44, 0x8f, 0xea, 0x0a, 0xfa, 0x66, 0x97,
	0x54, 0x4a, 0x47, 0x71, 0x34, 0x6f, 0xae, 0xc1, 0xec, 0x56, 0x27, 0xa3, 0xae, 0x61, 0xe8, 0x30,
	0xc3, 0x73, 0xa4, 0x11, 0x47, 0xf3, 0xde, 0x7a, 0x70, 0x94, 0x75, 0x68, 0x0a, 0xdd, 0x1c, 0x8b,
	0xe2, 0x9d, 0x65, 0xa7, 0x9b, 0x61, 0x5e, 0x73, 0x28, 0xe0, 0x8c, 0x25, 0xf1, 0x64, 0x29, 0x67,
	0xa7, 0xff, 0x9f, 0x0a, 0x8e, 0xf2, 0xb5, 0x74, 0x6a, 0x02, 0x6d, 0xb4, 0x98, 0xa1, 0xd7, 0xad,
	0x30, 0x3d, 0x91, 0xba, 0x84, 0x16, 0x65, 0x68, 0xac, 0x6e, 0x07, 0x5d, 0x82, 0xd2, 0xd0, 0xd9,
	0xa0, 0x45, 0xb7, 0x25, 0xdd, 0x89, 0xa3, 0x79, 0x63, 0x5d, 0xa1, 0xba, 0x85, 0xf1, 0x41, 0x6c,
	0xb2, 0x67, 0xcf, 0x49, 0x2e, 0xbc, 0x37, 0x56, 0x77, 0xc3, 0xcb, 0xe1, 0x41, 0xec, 0x13, 0x7b,
	0x5e, 0x05, 0xa9, 0x6e, 0x60, 0x44, 0x22, 0x2c, 0x45, 0x92, 0x51, 0x51, 0x60, 0x4a, 0xba, 0x17,
	0x37, 0x8f, 0xb1, 0xd2, 0x3e, 0x97, 0xf2, 0xee, 0x33, 0x82, 0x71, 0xb5, 0xf8, 0x0b, 0xc9, 0x9b,
	0xd9, 0x92, 0x7a, 0x80, 0x3e, 0x3b, 0xaa, 0x57, 0x9f, 0x2c, 0xce, 0xc7, 0xfe, 0x76, 0xd8, 0xe9,
	0x0f, 0x7e, 0xf6, 0x4f, 0x3d, 0xc2, 0xd0, 0x72, 0x6a, 0xdc, 0x1f, 0x2a, 0x96, 0x70, 0x21, 0x94,
	0x9a, 0xc2, 0x93, 0xfc, 0xbe, 0x65, 0xd3, 0x0e, 0xbf, 0xe3, 0xfe, 0x2b, 0x00, 0x00, 0xff, 0xff,
	0x87, 0x5c, 0x48, 0x72, 0x2f, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PenggunaServiceClient is the client API for PenggunaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PenggunaServiceClient interface {
	OnePengguna(ctx context.Context, in *PenggunaData, opts ...grpc.CallOption) (*PenggunaData, error)
	LoginPengguna(ctx context.Context, in *PenggunaData, opts ...grpc.CallOption) (*PenggunaData, error)
	RegisterPengguna(ctx context.Context, in *PenggunaData, opts ...grpc.CallOption) (*PenggunaData, error)
}

type penggunaServiceClient struct {
	cc *grpc.ClientConn
}

func NewPenggunaServiceClient(cc *grpc.ClientConn) PenggunaServiceClient {
	return &penggunaServiceClient{cc}
}

func (c *penggunaServiceClient) OnePengguna(ctx context.Context, in *PenggunaData, opts ...grpc.CallOption) (*PenggunaData, error) {
	out := new(PenggunaData)
	err := c.cc.Invoke(ctx, "/pengguna.penggunaService/onePengguna", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *penggunaServiceClient) LoginPengguna(ctx context.Context, in *PenggunaData, opts ...grpc.CallOption) (*PenggunaData, error) {
	out := new(PenggunaData)
	err := c.cc.Invoke(ctx, "/pengguna.penggunaService/loginPengguna", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *penggunaServiceClient) RegisterPengguna(ctx context.Context, in *PenggunaData, opts ...grpc.CallOption) (*PenggunaData, error) {
	out := new(PenggunaData)
	err := c.cc.Invoke(ctx, "/pengguna.penggunaService/registerPengguna", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PenggunaServiceServer is the server API for PenggunaService service.
type PenggunaServiceServer interface {
	OnePengguna(context.Context, *PenggunaData) (*PenggunaData, error)
	LoginPengguna(context.Context, *PenggunaData) (*PenggunaData, error)
	RegisterPengguna(context.Context, *PenggunaData) (*PenggunaData, error)
}

func RegisterPenggunaServiceServer(s *grpc.Server, srv PenggunaServiceServer) {
	s.RegisterService(&_PenggunaService_serviceDesc, srv)
}

func _PenggunaService_OnePengguna_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PenggunaData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PenggunaServiceServer).OnePengguna(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pengguna.penggunaService/OnePengguna",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PenggunaServiceServer).OnePengguna(ctx, req.(*PenggunaData))
	}
	return interceptor(ctx, in, info, handler)
}

func _PenggunaService_LoginPengguna_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PenggunaData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PenggunaServiceServer).LoginPengguna(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pengguna.penggunaService/LoginPengguna",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PenggunaServiceServer).LoginPengguna(ctx, req.(*PenggunaData))
	}
	return interceptor(ctx, in, info, handler)
}

func _PenggunaService_RegisterPengguna_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PenggunaData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PenggunaServiceServer).RegisterPengguna(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pengguna.penggunaService/RegisterPengguna",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PenggunaServiceServer).RegisterPengguna(ctx, req.(*PenggunaData))
	}
	return interceptor(ctx, in, info, handler)
}

var _PenggunaService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pengguna.penggunaService",
	HandlerType: (*PenggunaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "onePengguna",
			Handler:    _PenggunaService_OnePengguna_Handler,
		},
		{
			MethodName: "loginPengguna",
			Handler:    _PenggunaService_LoginPengguna_Handler,
		},
		{
			MethodName: "registerPengguna",
			Handler:    _PenggunaService_RegisterPengguna_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pengguna.proto",
}
